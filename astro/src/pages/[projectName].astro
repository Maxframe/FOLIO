---
import ProjectLayout from "../layouts/ProjectLayout.astro";
import { useSanityClient } from "@sanity/astro";
import { PortableText } from "astro-portabletext";

import Nav from "../components/Nav.astro";
import ProjectSection from "../components/ProjectSection.astro";
import ImageBuilder from "../components/ImageBuilder.astro";
import Footer from "../components/Footer.astro";

export async function getStaticPaths() {
  const allProjectData = await useSanityClient().fetch(
    `*[_type == 'projectsSection'][0]{projectsFeatured[]->}`
  );
  return allProjectData.projectsFeatured?.map((project: any) => {
    return {
      params: { projectName: project.slug.current },
      props: { project },
    };
  });
}
const { project } = Astro.props;
/* console.log(project.infoSnippets);
 */
const thumbnailImage = project.thumbnailImage.asset._ref;
const color = "rgb(2, 10, 2)";
---

<ProjectLayout title={project.projectName}>
  <Nav />
  <div class="image-wrapper hero-image-wrapper">
    <ImageBuilder
      cls="project-hero-image"
      source={thumbnailImage}
      alt={project.thumbAltText}
      loading="eager"
      w={1250}
    />
  </div>

  <div class="project-container">
    <div class="project-card"></div>
    <div class="project-title-wrapper">
      <h1 class="project-title">{project.projectName}</h1>
    </div>

    <div class="infosection-wrapper">
      <div class="tag-description-wrapper">
        <div class="tag-list">
          {project.tags?.map((tag: string) => <span class="tag">{tag}</span>)}
        </div>

        <div class="description block-wrapper">
          <PortableText value={project.description} />
        </div>
      </div>
      <div class="info-snippet-wrapper">
        <div class="info-snippet">
          <h3>Kontext</h3>
          <p>{project.infoSnippets.contextText}</p>
        </div>
        <div class="info-snippet">
          <h3>Rolle</h3>
          <p>{project.infoSnippets.roleText}</p>
        </div>
        <div class="info-snippet">
          <h3>Tools</h3>
          <p>{project.infoSnippets.techText}</p>
        </div>
        {
          project.AddiInfoSnippets?.map((snippet: any) => (
            <div class="info-snippet add-info-snippet">
              <h3>{snippet.snippetTitle}</h3>
              <p>{snippet.snippetText}</p>
            </div>
          ))
        }
      </div>
    </div>

    <div id="sections-wrapper">
      <!-- {
        project.content?.map((section: any) => (
          <ProjectSection
            sectionType={section._type}
            sectionTitle={section.sectionTitle}
            sectionText={section.sectionText}
            sectionImages={section.sectionImages}
          />
        ))
      } -->
    </div>
  </div>
</ProjectLayout>
<Footer />

<style lang="scss">
  .image-wrapper {
    max-width: var(--hero-w);
    margin: auto;
  }

  .hero-image-wrapper {
    position: relative;
    padding: var(--nav-height) var(--content-px) 0;
    z-index: -2;
  }

  .project-container {
    position: relative;
    max-width: var(--project-content-w);
    margin: 0 auto;
    margin-top: calc(var(--project-container-offset) * -1);
    padding: 0 var(--content-px);
    display: grid;
    grid-template-columns: repeat(18, 1fr);
    grid-template-rows: auto;
    column-gap: 1.5%;

    .project-card {
      background-color: var(--clr-wb-darkish);
      border-radius: var(--project-b-radius);
      position: absolute;
      width: 100%;
      height: 100%;
      grid-column: 2 / 18;
      z-index: -1;
    }

    .project-title-wrapper {
      height: calc(var(--project-container-offset) * 2);
      display: flex;
      grid-column: 1 / 19;
      justify-content: center;
      align-items: center;

      .project-title {
        text-align: center;
        font-size: var(--step-4);
        font-weight: 800;
        line-height: 1;
        transform: translateY(-25%);
      }
    }

    .infosection-wrapper {
      display: grid;
      grid-template-columns: repeat(18, 1fr);
      grid-template-rows: auto;
      grid-column: 1 / 19;
      column-gap: 1.5%;

      .tag-description-wrapper {
        grid-column: 3 / calc(6 * 2);

        .tag-list {
          display: flex;
          flex-wrap: wrap;
          column-gap: 1.2rem;
          row-gap: 0.7rem;
          color: var(--hero-text);
          font-weight: 600;
          text-transform: uppercase;
          letter-spacing: 0.05rem;
          margin-bottom: 1.5rem;

          .tag {
            padding: 0.5rem 1.1rem;
            border-radius: 999rem;
            background-color: var(--c-highlighted-bg);
            border: solid var(--stroke-w) var(--c-stroke);
            font-weight: 700;
          }
        }
        .description {
        }
      }
      .info-snippet-wrapper {
        grid-column: calc(6 * 2 + 1) / 17;

        .info-snippet {
          margin-bottom: 1rem;

          h3 {
            text-transform: uppercase;
            font-size: 0.8rem;
            font-weight: 700;
            letter-spacing: 0.06rem;
          }
        }
      }
    }
  }

  h2 {
    margin-top: 0.4rem;
    font-size: 1.8rem;
    font-weight: 600;
  }

  @media screen and (max-width: 850px) {
    :root {
      --content-px: 1rem;
    }
    .project-container {
    }

    .hero-image-wrapper {
      padding: var(--nav-height) 0 0;
    }
  }
</style>
