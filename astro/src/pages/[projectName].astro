---
import { sanityClient } from "sanity:client";
import { PortableText } from "astro-portabletext";

import Layout from "../layouts/Layout.astro";
import Nav from "../components/ui/Nav.astro";
import ProjectSections from "../components/project/ProjectSections.astro";
import NextProjectLink from "../components/project/NextProjectLink.astro";
import ImageBuilder from "../components/utils/ImageBuilder.astro";
import Footer from "../components/ui/Footer.astro";
import BgLayer from "../components/ui/BgLayer.astro";
import FloatingModeSwitcher from "../components/ui/FloatingModeSwitcher.astro";

export async function getStaticPaths() {
  const allProjectData = await sanityClient.fetch(
    `*[_type == 'projectsSection'][0]{
      projectsFeatured[]->{
        projectName,
        "slug": slug.current,

        "thumbnailImage": thumbnailImage.image.asset._ref,
        "thumbAltText": thumbnailImage.image.alt,
        "thumbLqip": thumbnailImage.image.asset->metadata.lqip,
        "thumbRatio": thumbnailImage.image.asset->metadata.dimensions.aspectRatio,

        "heroImage": heroImage.image.asset._ref,
        "heroAltText": heroImage.image.alt,
        "heroLqip": heroImage.image.asset->metadata.lqip,
        "heroRatio": heroImage.image.asset->metadata.dimensions.aspectRatio,

        description,
        tags,
        "contextText": infoSnippets.contextText,
        "roleText": infoSnippets.roleText,
        "techText": infoSnippets.techText,
         
        AddiInfoSnippets[] {
          snippetText,
          snippetTitle,
        },
      }
    }`
  );
  return allProjectData.projectsFeatured?.map((project: any) => {
    return {
      params: { projectName: project.slug },
      props: { project },
    };
  });
}

const { project } = Astro.props as { project: any };
---

<Layout title={project.projectName}>
  <Nav />
  <main>
    <div class="project-hero-image-container">
      <div class="project-hero-image-wrapper image-wrapper">
        {
          project.heroImage ? (
            <ImageBuilder
              cls="project-hero-image"
              source={project.heroImage}
              lqip={project.thumbLqip}
              ratio={project.thumbLqip}
              alt={project.thumbAltText}
              loading="eager"
              vert
            />
          ) : (
            <ImageBuilder
              cls="project-hero-image"
              source={project.thumbnailImage}
              lqip={project.heroLqip}
              ratio={project.heroRatio}
              alt={project.heroAltText}
              loading="eager"
              vert
            />
          )
        }
      </div>
    </div>

    <div class="project-overflow-container">
      <div class="project-container">
        <div class="project-card"></div>
        <div class="project-title-wrapper">
          <h1 class="project-title">{project.projectName}</h1>
        </div>

        <div class="infosection-wrapper">
          <div class="tag-description-wrapper">
            {
              project.tags?.length > 0 && (
                <div class="tag-list">
                  {project.tags.map((tag: string) => (
                    <span class="tag">{tag}</span>
                  ))}
                </div>
              )
            }
            <div class="description block-wrapper">
              <PortableText value={project.description} />
            </div>
          </div>
          <div class="info-snippet-wrapper">
            <div class="info-snippet">
              <h2>Kontext</h2>
              <p>{project.contextText}</p>
            </div>
            <div class="info-snippet">
              <h2>Rolle</h2>
              <p>{project.roleText}</p>
            </div>
            <div class="info-snippet">
              <h2>Tools</h2>
              <p>{project.techText}</p>
            </div>
            {
              project.AddiInfoSnippets?.map((snippet: any) => (
                <div class="info-snippet add-info-snippet">
                  <h2>{snippet.snippetTitle}</h2>
                  <p>{snippet.snippetText}</p>
                </div>
              ))
            }
          </div>
        </div>

        <div class="sections-wrapper">
          <ProjectSections currentSlug={project.slug} />
        </div>
      </div>
    </div>
    <NextProjectLink currentSlug={project.slug} />
  </main>
  <Footer />
  <BgLayer />
  <FloatingModeSwitcher show />
</Layout>

<style lang="scss">
  .image-wrapper {
    margin: auto;
  }

  .project-hero-image-container {
    padding: var(--nav-height) var(--content-px) 0;

    .project-hero-image-wrapper {
      max-height: 1280px;
      max-width: 1280px;
      height: calc(100dvh - var(--nav-height) - 3rem);
      position: relative;
      border-radius: var(--md-radius);
      overflow: hidden;
      z-index: -2;
    }
  }

  .project-overflow-container {
    width: 100%;
    overflow-x: hidden;
    margin-top: calc(var(--project-container-offset) * -1);
    .project-container {
      position: relative;
      display: grid;
      margin: 0 auto;
      padding: 0 var(--content-px);
      max-width: var(--project-content-w);
      grid-template-columns: repeat(18, 1fr);
      grid-template-rows: auto;
      column-gap: var(--project-grid-gap);
      row-gap: var(--project-sections-gap);

      .project-card {
        position: absolute;
        background-color: var(--c-pill-bg);
        border-radius: var(--md-radius);
        backdrop-filter: blur(40px);
        width: 100%;
        height: 100%;
        grid-column: 2 / calc(var(--project-grid-nr) - 1);
        border: solid var(--stroke-w) rgb(var(--c-stroke));
        z-index: -1;
        transition:
          background-color var(--modeswitch-transition-time),
          border var(--modeswitch-transition-time);
      }

      .project-title-wrapper {
        height: calc(var(--project-container-offset) * 2);
        display: flex;
        grid-column: 3 / calc(var(--project-grid-nr) - 2);
        justify-content: center;
        align-items: center;
        margin-bottom: -5rem;

        .project-title {
          font-size: var(--step-4);
          font-weight: 800;
          line-height: 1;
          transform: translateY(-25%);
          text-align: center;
          transition: color var(--modeswitch-transition-time);
        }
      }

      .infosection-wrapper {
        display: grid;
        grid-template-columns: repeat(18, 1fr);
        grid-template-rows: auto;
        grid-column: 1 / var(--project-grid-nr);
        column-gap: var(--project-grid-gap);
        row-gap: var(--project-sections-gap);
        .tag-description-wrapper {
          grid-column: 3 / 12;

          .tag-list {
            display: flex;
            flex-wrap: wrap;
            column-gap: 1.2rem;
            row-gap: 1rem;
            font-weight: 600;
            text-transform: uppercase;
            text-align: center;
            letter-spacing: 0.05rem;
            margin-top: -0.2rem;
            margin-bottom: 1.5rem;

            .tag {
              font-size: 0.75rem;
              padding: 0.5rem 1.1rem;
              border-radius: 999rem;
              background-color: rgb(var(--clr-wb-light), 0.2);
              border: solid var(--stroke-w) rgb(var(--c-stroke));
              font-weight: 700;
              letter-spacing: 0.06rem;
              transition:
                color var(--modeswitch-transition-time),
                background-color var(--modeswitch-transition-time),
                border var(--modeswitch-transition-time);
            }
          }
          .description {
          }
        }
        .info-snippet-wrapper {
          grid-column: 13 / 17;
          display: grid;
          grid-template-columns: 1fr;
          column-gap: 3rem;
          row-gap: 2rem;

          .info-snippet {
            h3 {
              text-transform: uppercase;
              font-size: 0.75rem;
              font-weight: 700;
              color: rgb(var(--c-fg), 0.6);
              letter-spacing: 0.06rem;
              margin-bottom: 0.3em;
              transition: color var(--modeswitch-transition-time);
            }
            p {
              transition: color var(--modeswitch-transition-time);
            }
          }
        }
      }
      .sections-wrapper {
        grid-column: 1 / var(--project-grid-nr);
        margin-bottom: calc(var(--project-sections-gap) * 1.5);
        display: flex;
        flex-direction: column;
        row-gap: var(--project-sections-gap);
      }
    }
  }

  @media screen and (max-width: 800px) {
    .project-overflow-container .project-container {
      margin-left: -10px;
      width: calc(100% + 20px);
      padding: 0;

      .infosection-wrapper {
        .tag-description-wrapper {
          grid-column: 3 / -3;
          .tag-list {
            justify-content: center;
            margin-bottom: 3rem;
          }
        }

        .info-snippet-wrapper {
          grid-column: 3 / -3;
          grid-template-columns: 1fr 1fr;
          column-gap: 3rem;
        }
      }
      .sections-wrapper {
        row-gap: var(--project-sections-gap);
      }
    }

    .project-hero-image-container {
      padding: var(--nav-height) 0 0;
      .project-hero-image-wrapper {
        border-radius: 0;
      }
    }
  }
</style>
