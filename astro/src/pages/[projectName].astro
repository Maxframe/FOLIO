---
import ProjectLayout from "../layouts/ProjectLayout.astro";
import { useSanityClient } from "@sanity/astro";
import { PortableText } from "astro-portabletext";



import Nav from "../components/Nav.astro";
import ProjectSection from "../components/ProjectSection.astro";
import ImageBuilder from "../components/ImageBuilder.astro";
import Footer from "../components/Footer.astro";

export async function getStaticPaths() {
  const allProjectData = await useSanityClient().fetch(`*[_type == 'projectsSection'][0]{projectsFeatured[]->}`)
  console.log(allProjectData);
  return allProjectData.projectsFeatured?.map((project: any) => {
    return {
      params: { projectName: project.slug.current },
      props: { project },
    };
  });
}
const { project } = Astro.props;

const thumbnailImage = project.thumbnailImage.asset._ref;
---

<ProjectLayout title={project.projectName}>
  <Nav />
  <div class="image-wrapper">
    <ImageBuilder cls="project-hero-image" source={thumbnailImage} alt={project.thumbAltText} loading="eager" w={1250} />
  </div>

  <div class="container">
    <h1>{project.projectName}</h1>

    <div class="infosection-wrapper">

      <div class="tag-description-wrapper">

        <div class="tag-list">
          {project.tags?.map((tag: string) => <span class="tag">{tag}</span>)}
        </div>
        
        <div class="description">
          <PortableText value={project.description} />
        </div>

      </div>
    <div class="info-snippet-wrapper">
      div

    </div>
  </div>


    <div id="sections-wrapper">
      {
        project.content?.map((section: any) => (
          <ProjectSection
            sectionTitle={section.sectionTitle}
            sectionText={section.sectionText}
            sectionImages={section.sectionImages}
          />
        ))
      }
    </div>
  </div>
</ProjectLayout>
<Footer />

<style lang="scss">
  .image-wrapper {
    max-width: var(--hero-w);
    padding: 0 var(--content-px);
    margin: auto;
    border-radius: 1rem;
  }

  .container {
    position: relative;
    background-color: var(--c-bg);
    border-radius:4rem;
    max-width: var(--breakpoint-md);
    margin: 0 auto;
    padding: 0 2rem;
    overflow: hidden;
    margin-top: -8rem;
  }

  h1 {
    text-align: center;
    margin-top: 1.5rem;
    font-size: var(--step-4);
    font-weight: 800;
    color: var(--clr-accent);
  }

  .tag-list {
    display: flex;
    flex-wrap: wrap;
    column-gap: 1.5rem;
    margin-top: 1rem;
    color: var(--hero-text);
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.05rem;

    .tag {
      padding: 0.5rem 1.1rem;
      border-radius: 999rem;
      border: solid 0.2rem var(--c-stroke);
      font-weight: 700;
    }
  }

  h2 {
    margin-top: 0.4rem;
    font-size: 1.8rem;
    font-weight: 600;
  }

  @media screen and (max-width: 52rem) {
    h1 {
      font-size: 2rem;
    }
  }

  @media screen and (max-width: 32rem) {
    .container {
      padding: 0 1.2rem;
    }
  }

  @media only screen and (hover: none), (max-width: 32rem) {
    .hero-image {
      margin-top: 0;
    }
  }
</style>
