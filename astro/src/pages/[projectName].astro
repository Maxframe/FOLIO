---
import ProjectLayout from "../layouts/ProjectLayout.astro";
import { sanityClient } from "sanity:client";
import { PortableText } from "astro-portabletext";

import Nav from "../components/Nav.astro";
import ProjectSections from "../components/ProjectSections.astro";
import NextProjectLink from "../components/NextProjectLink.astro";
import ImageBuilder from "../components/ImageBuilder.astro";
import Footer from "../components/Footer.astro";
import BgLayer from "../components/BgLayer.astro";
import FloatingModeSwitcher from "../components/FloatingModeSwitcher.astro";

type ProjectType = {
  projectName: string;
  slug: {
    current: string;
  };
  thumbnailImage: {
    asset: {
      _ref: string;
    };
  };
  thumbAltText: string;
  tags: string[];
  description: any;
  infoSnippets: {
    contextText: string;
    roleText: string;
    techText: string;
  };
  AddiInfoSnippets: Array<{
    snippetTitle: string;
    snippetText: string;
  }>;
  content?: any[];
};

export async function getStaticPaths() {
  const allProjectData = await sanityClient.fetch(
    `*[_type == 'projectsSection'][0]{projectsFeatured[]->}`
  );
  return allProjectData.projectsFeatured?.map((project: ProjectType) => {
    return {
      params: { projectName: project.slug.current },
      props: { project },
    };
  });
}
const { project } = Astro.props as { project: ProjectType };
---

<ProjectLayout title={project.projectName}>
  <Nav />
  <div class="image-wrapper hero-image-wrapper">
    <ImageBuilder
      cls="project-hero-image"
      source={project.thumbnailImage.asset._ref}
      alt={project.thumbAltText}
      loading="eager"
      w={1250}
    />
  </div>

  <div class="project-container">
    <div class="project-card"></div>
    <div class="project-title-wrapper">
      <h1 class="project-title">{project.projectName}</h1>
    </div>

    <div class="infosection-wrapper">
      <div class="tag-description-wrapper">
        <div class="tag-list">
          {project.tags?.map((tag: string) => <span class="tag">{tag}</span>)}
        </div>

        <div class="description block-wrapper">
          <PortableText value={project.description} />
        </div>
      </div>
      <div class="info-snippet-wrapper">
        <div class="info-snippet">
          <h3>Kontext</h3>
          <p>{project.infoSnippets?.contextText}</p>
        </div>
        <div class="info-snippet">
          <h3>Rolle</h3>
          <p>{project.infoSnippets?.roleText}</p>
        </div>
        <div class="info-snippet">
          <h3>Tools</h3>
          <p>{project.infoSnippets?.techText}</p>
        </div>
        {
          project.AddiInfoSnippets?.map((snippet: any) => (
            <div class="info-snippet add-info-snippet">
              <h3>{snippet.snippetTitle}</h3>
              <p>{snippet.snippetText}</p>
            </div>
          ))
        }
      </div>
    </div>

    <div class="sections-wrapper">
      {
        project.content?.map((section: any) => (
          <ProjectSections sectionContent={section} />
        ))
      }
    </div>
  </div>
  <NextProjectLink currentSlug={project.slug.current} />
</ProjectLayout>
<Footer />
<BgLayer />
<FloatingModeSwitcher show />

<style lang="scss">
  .image-wrapper {
    max-width: var(--hero-w);
    margin: auto;
  }

  .hero-image-wrapper {
    position: relative;
    padding: var(--nav-height) var(--content-px) 0;
    z-index: -2;
  }

  .project-container {
    position: relative;
    max-width: var(--project-content-w);
    margin: calc(var(--project-container-offset) * -1) auto 0;
    padding: 0 var(--content-px);
    display: grid;
    grid-template-columns: repeat(18, 1fr);
    grid-template-rows: auto;
    column-gap: var(--project-grid-gap);
    row-gap: var(--project-sections-gap);

    .project-card {
      position: absolute;
      background-color: rgb(var(--c-bg));
      border-radius: var(--project-md-radius);
      backdrop-filter: blur(40px);
      width: 100%;
      height: 100%;
      grid-column: 2 / calc(var(--project-grid-nr) - 1);
      border: solid var(--stroke-w) rgb(var(--c-stroke));
      z-index: -1;
      transition:
        background-color var(--modeswitch-transition-time),
        border var(--modeswitch-transition-time);
    }

    .project-title-wrapper {
      height: calc(var(--project-container-offset) * 2);
      display: flex;
      grid-column: 3 / calc(var(--project-grid-nr) - 2);
      justify-content: center;
      align-items: center;
      margin-bottom: -5rem;

      .project-title {
        font-size: var(--step-4);
        font-weight: 800;
        line-height: 1;
        transform: translateY(-25%);
        text-align: center;
      }
    }

    .infosection-wrapper {
      display: grid;
      grid-template-columns: repeat(18, 1fr);
      grid-template-rows: auto;
      grid-column: 1 / var(--project-grid-nr);
      column-gap: var(--project-grid-gap);
      row-gap: var(--project-sections-gap);
      .tag-description-wrapper {
        grid-column: 3 / 12;

        .tag-list {
          display: flex;
          flex-wrap: wrap;
          column-gap: 1.2rem;
          row-gap: 0.7rem;
          font-weight: 600;
          text-transform: uppercase;
          text-align: center;
          letter-spacing: 0.05rem;
          margin-top: -0.2rem;
          margin-bottom: 1.5rem;

          .tag {
            font-size: 0.8rem;
            padding: 0.5rem 1.1rem;
            border-radius: 999rem;
            background-color: rgb(var(--clr-wb-light));
            border: solid var(--stroke-w) rgb(var(--c-stroke));
            font-weight: 700;
            letter-spacing: 0.06rem;
          }
        }
        .description {
        }
      }
      .info-snippet-wrapper {
        grid-column: 13 / 17;

        .info-snippet {
          margin-bottom: 2rem;

          h3 {
            text-transform: uppercase;
            font-size: 0.8rem;
            font-weight: 700;
            color: rgb(var(--c-fg), 0.6);
            letter-spacing: 0.06rem;
            margin-bottom: 0.3em;
          }
        }
      }
    }
    .sections-wrapper {
      grid-column: 1 / var(--project-grid-nr);
      margin-bottom: var(--project-sections-gap);
      display: flex;
      flex-direction: column;
      row-gap: var(--project-sections-gap);
    }
  }

  @media screen and (max-width: 800px) {
    :root {
      --content-px: 1rem;
    }
    .project-container {
      margin-left: -10px;
      width: calc(100% + 20px);
      padding: 0;

      .infosection-wrapper {
        .tag-description-wrapper {
          grid-column: 3 / -3;
          row-gap: var(--project-sections-gap);
          .tag-list {
            justify-content: center;
          }
        }

        .info-snippet-wrapper {
          grid-column: 3 / -3;
        }
      }
      .sections-wrapper {
        row-gap: var(--project-sections-gap);
      }
    }

    .hero-image-wrapper {
      padding: var(--nav-height) 0 0;
    }
  }
</style>
