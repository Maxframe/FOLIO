---
import { sanityClient } from "sanity:client";
import ImageBuilder from "../utils/ImageBuilder.astro";
import { PortableText } from "astro-portabletext";

export interface Props {
  currentSlug: any;
}
const { currentSlug } = Astro.props as Props;

const projectData = await sanityClient.fetch(
  `*[_type == 'project' && slug.current == '${currentSlug}'][0]{
      content[] {
      ...,
      _type == 'sectionImageSingle' => {
        'sLqip': sImage.image.asset->metadata.lqip,
        'sRatio': sImage.image.asset->metadata.dimensions.aspectRatio
      },
      _type == 'sectionImageDouble' => {
        'dLqipLeft': dImage.dImageLeft.image.asset->metadata.lqip,
        'dRatioLeft': dImage.dImageLeft.image.asset->metadata.dimensions.aspectRatio,
        'dLqipRight': dImage.dImageRight.image.asset->metadata.lqip,
        'dRatioRight': dImage.dImageRight.image.asset->metadata.dimensions.aspectRatio
      },
    }
  }`
);
---

{
  projectData.content?.map((section: any) => {
    switch (section._type) {
      case "sectionText":
        return (
          <div class="text-section">
            {section.rightToLeft ? (
              <>
                {section.sectionTitle && (
                  <h3
                    class="text-section-title rtl-title"
                    style={{
                      gridColumnStart: `span 3`,
                      gridColumnEnd: `calc(${section.textGridPos} * 2 + 7)`,
                    }}
                  >
                    {section.sectionTitle}
                  </h3>
                )}
                <div
                  class="text-section-text block-wrapper rtl-text"
                  style={{
                    gridColumnStart: `calc(${section.textGridPos} * 2 - 4)`,
                    gridColumnEnd: `span 8`,
                  }}
                >
                  <PortableText value={section.sectionText} />
                </div>
              </>
            ) : (
              <>
                {section.sectionTitle && (
                  <h3
                    class="text-section-title"
                    style={{
                      gridColumnStart: `span 3`,
                      gridColumnEnd: `calc(${section.textGridPos} * 2 - 1)`,
                    }}
                  >
                    {section.sectionTitle}
                  </h3>
                )}
                <div
                  class="text-section-text block-wrapper"
                  style={{
                    gridColumnStart: `calc(${section.textGridPos} * 2 - 1)`,
                    gridColumnEnd: `span 8`,
                  }}
                >
                  <PortableText value={section.sectionText} />
                </div>
              </>
            )}
          </div>
        );

      case "sectionImageSingle":
        return (
          <div class="single-image-section">
            <div
              class="single-image-wrapper"
              style={{
                gridColumnStart: `calc(${section.imageSettings.gridBegin} * 2 - 1)`,
                gridColumnEnd: `calc(${section.imageSettings.gridEnd} * 2 - 1)`,
              }}
            >
              <div class="image-wrapper">
                <ImageBuilder
                  cls="single-image border round"
                  source={section.sImage.image.asset._ref}
                  alt={section.sImage.alt}
                  lqip={section.sLqip}
                  ratio={section.sRatio}
                  caption={section.sImage.caption}
                  captionUrl={section.sImage.captionUrl}
                  isDark={section.imageSettings.isDarkImage}
                />
              </div>
            </div>
          </div>
        );

      case "sectionImageDouble":
        return (
          <div class="double-image-section">
            <div
              class="double-image-wrapper image-wrapper"
              style={{
                gridColumnStart: `calc(${section.imageSettings.gridBeginLeft} * 2 - 1)`,
                gridColumnEnd: `calc(${section.imageSettings.gridEndLeft} * 2 - 1)`,
              }}
            >
              <ImageBuilder
                cls="double-image border round"
                source={section.dImage.dImageLeft.image.asset._ref}
                alt={section.dImage.dImageLeft.alt}
                lqip={section.dLqipLeft}
                ratio={section.dRatioLeft}
                caption={section.dImage.dImageLeft.caption}
                captionUrl={section.dImage.dImageLeft.captionUrl}
                isDark={section.imageSettings.isDarkImageLeft}
              />
            </div>
            <div
              class="double-image-wrapper image-wrapper"
              style={{
                gridColumnStart: `calc(${section.imageSettings.gridBeginRight} * 2 - 1)`,
                gridColumnEnd: `calc(${section.imageSettings.gridEndRight} * 2 - 1)`,
              }}
            >
              <ImageBuilder
                cls="double-image border round"
                source={section.dImage.dImageRight.image.asset._ref}
                alt={section.dImage.dImageRight.alt}
                lqip={section.dLqipRight}
                ratio={section.dRatioRight}
                caption={section.dImage.dImageRight.caption}
                captionUrl={section.dImage.dImageRight.captionUrl}
                isDark={section.imageSettings.isDarkImageRight}
              />
            </div>
          </div>
        );
    }
  })
}

<style lang="scss">
  .text-section {
    display: grid;
    grid-template-columns: repeat(18, 1fr);
    grid-template-rows: auto;
    column-gap: var(--project-grid-gap);

    .text-section-title {
      text-align: right;
      text-transform: uppercase;
      font-size: 0.75rem;
      font-weight: 700;
      color: rgb(var(--c-fg) / 0.6);
      letter-spacing: 0.06rem;
      margin-top: 0.5rem;
      transition: color var(--modeswitch-transition-time);
    }

    .text-section-text {
      font-size: var(--step-1);
      line-height: 1.6;
      font-weight: 500;
    }
    .rtl-text {
      text-align: right;
      grid-column-start: calc(var(--textGridPos) * 2 - 1);
    }

    .rtl-title {
      text-align: left;
      grid-row-start: 1;
    }
  }

  .single-image-section {
    display: grid;
    grid-template-columns: repeat(18, 1fr);
    grid-template-rows: auto;
    grid-column: 1 / var(--project-grid-nr);
    column-gap: var(--project-grid-gap);

    .caption-text {
      text-align: center;
      padding-top: 0.5rem;
    }
  }

  .double-image-section {
    display: grid;
    grid-template-columns: repeat(18, 1fr);
    grid-template-rows: auto;
    column-gap: var(--project-grid-gap);

    .double-image-wrapper {
      height: fit-content;
    }
  }

  @media only screen and (width <= 800px) {
    .text-section {
      .text-section-text,
      .text-section-title {
        grid-column: -3 / 3 !important;
        text-align: left;
      }
    }

    .single-image-section {
      .single-image-wrapper {
        grid-column: -3 / 3 !important;
      }
    }

    .double-image-section {
      row-gap: var(--project-sections-gap);
      .double-image-wrapper {
        grid-column: -3 / 3 !important;
      }
    }
  }
</style>
