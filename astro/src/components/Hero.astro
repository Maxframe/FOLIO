---
import "../styles/global.css";
import { useSanityClient } from "@sanity/astro";

const heroData = await useSanityClient().fetch(`*[_type == 'hero'][0]{
  heroText {
    title,
    titleSpecial,
    subtitle,
    subtitleSpecial
  }
}`)
const title = heroData.heroText.title;
const titleSpecial = heroData.heroText.titleSpecial;
const subtitle = heroData.heroText.subtitle;
const subtitleSpecial = heroData.heroText.subtitleSpecial;
---

  <div class="hero-container">
    <h1>
      <span class="title highlight">{titleSpecial}</span>
      <span class="title">{title}</span><br>
      <span class="sub">{subtitle}</span>
      <span class="sub hidden">{subtitleSpecial}</span>
    </h1>

    <div class="switchmode-wrapper">
      <label class="switchmode" for="checkbox">
        <input type="checkbox" id="checkbox" />
        <div class="slider round"></div>
      </label>
    </div>

    <!-- <button id="lightmode-button">
      <span class="lightmode-slider"></span>

      <svg
        width="25px"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 29.36 29.36"
      >
        <g id="Layer_2" data-name="Layer 2"
          ><g id="Layer_2-2" data-name="Layer 2">
            <path
              class="svg-element"
              d="M14.68,29.36A14.68,14.68,0,1,0,0,14.68,14.68,14.68,0,0,0,14.68,29.36Zm.14-26.59a11.91,11.91,0,0,1,0,23.82Z"
            ></path></g
          ></g
        ></svg>
    </button> -->
  </div>

<style lang="scss">
  .hero-container {
    position: relative;
    display: flex;
    height: calc(100dvh - var(--featured-offset));
    height: calc(100vh - var(--featured-offset));
    min-height: calc(100vh var(--featured-offset));
    gap: 4rem;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 30px;
    
    h1 {
      position: relative;
      transition: color var(--switchmode-transition-time);
      max-width: 35rem;
      margin-top: 0;
      color: var(--c-fg);
      line-height: 1.2;
      user-select: none;
   
      .title {
        font-size: 4rem;
      }

      .highlight {
        color: var(--clr-accent);
      }

      .sub {
        font-size: 1.4rem;
        font-weight: 500;
      }

      .hidden {
        color: var(--clr-wb-dark);
      }
    }
  }




/* Mode Switcher */
  .switchmode-wrapper {
    display: flex;
    align-items: center;
  }
  .switchmode {
    display: inline-block;
    position: relative;
    width: var(--switchmode-w);
    height: var(--switchmode-h);
    transition: 0.4s;
    input {
      display: none;
    }
  }


  .slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    outline: solid 0.2rem var(--c-stroke);
    background-color: var(--clr-wb-light20);
    transition: var(--switchmode-transition-time);

    &:before {
      position: absolute;
      transform-origin: center;
      transform: translate(-50%, 0%);
      background-color: var(--clr-wb-light);
      content: "";
      height: calc(var(--switchmode-h) - var(--switchmode-slider-dist));
      transition: var(--switchmode-transition-time);
      width: calc(var(--switchmode-h) - var(--switchmode-slider-dist));
      top: calc(var(--switchmode-slider-dist) / 2);
      left: calc(var(--switchmode-h) / 2);
      outline: solid 0.2rem var(--c-stroke);
    }

    .round {
      border-radius: 999rem;
    }
  }


  input:checked + .slider {
    outline: solid 0.2rem var(--c-stroke);
  }

  input:checked + .slider:before {
    left: calc(var(--switchmode-w) - var(--switchmode-h) / 2);
    outline: solid 0.2rem var(--c-stroke);
  }

  .round {
    border-radius: 999rem;
  }

  .slider.round:before {
    border-radius: 50%;
  }
</style>
