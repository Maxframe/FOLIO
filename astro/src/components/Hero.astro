---
import { useSanityClient } from "@sanity/astro";

const heroData = await useSanityClient().fetch(`*[_type == 'hero'][0]{
  heroText {
    title,
    titleSpecial,
    subtitleLeft,
    subtitleConnect,
    subtitleRight
  }
}`);
const title = heroData.heroText.title;
const titleSpecial = heroData.heroText.titleSpecial;
const subtitleLeft = heroData.heroText.subtitleLeft;
const subtitleConnect = heroData.heroText.subtitleConnect;
const subtitleRight = heroData.heroText.subtitleRight;
---

<div class="hero-container">
  <h1>
    <span class="title highlight">{titleSpecial}</span>
    <span class="title">{title}</span><br />
    <div class="sub-wrapper">
      <span class="sub sub-left" data-value={subtitleLeft}>{subtitleLeft}</span>
      <span class="sub sub-connect">{subtitleConnect}</span>
      <span class="sub sub-right">{subtitleRight}</span>
    </div>
  </h1>

  <div class="modeswitch-wrapper">
    <button class="modeswitch">
      <div class="slider round">
        <div class="slidee round">
          <div class="arrow-wrapper">
            <svg
              width="21"
              height="38"
              viewBox="0 0 21 38"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M4.32182 35.4846L18.6959 20.1072C19.2785 19.484 19.2785 18.516 18.6959 17.8928L4.32182 2.51544C3.31729 1.4408 1.5159 2.15164 1.5159 3.62267L1.5159 34.3773C1.5159 35.8484 3.3173 36.5592 4.32182 35.4846Z"
              ></path>
            </svg>
          </div>
        </div>
      </div>
    </button>
  </div>
</div>

<style lang="scss">
  .hero-container {
    position: relative;
    display: flex;
    height: calc(100dvh - var(--featured-offset));
    height: calc(100vh - var(--featured-offset));
    min-height: calc(100vh var(--featured-offset));
    gap: 4rem;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 30px;

    h1 {
      position: relative;
      transition: color var(--modeswitch-transition-time);
      margin-top: 0;
      color: var(--c-fg);
      user-select: none;
      text-align: center;
      line-height: 1.2;

      .title {
        font-size: var(--step-4);
      }

      .highlight {
        color: rgb(var(--clr-accent));
      }

      .sub-wrapper {
        padding: 1rem 0;
        display: flex;
        gap: 1rem;
        align-items: center;
        .sub {
          font-size: var(--step-1);
          font-weight: 600;
        }

        .sub-left {
          font-weight: 500;
          font-family: monospace;
          color: rgb(var(--clr-wb-light));
        }

        .sub-connect {
        }

        .sub-right {
          position: relative;
          z-index: 1;
          color: rgb(var(--clr-wb-dark));
        }
      }
      .hidden {
        color: rgb(var(--clr-wb-dark));
      }
    }
  }
  body.lightmode .hero-container .sub-right {
    &::after {
      position: absolute;
      content: "";
      left: -0.2rem;
      right: 0;
      bottom: -0.3rem;
      height: 0.3rem;
      background-color: rgb(var(--clr-accent));
      width: calc(100% + 0.2rem);
      transform: scaleX(0);
      transform-origin: bottom right;
      transition: transform var(--modeswitch-transition-time) ease;
      z-index: -1;
    }
    &:hover::after {
      transform: scaleX(1);
      transform-origin: bottom left;
    }
  }

  /* Mode Switcher */
  .modeswitch-wrapper {
    display: flex;
    align-items: center;
  }
  .modeswitch {
    display: inline-block;
    position: relative;
    width: var(--hero-modeswitch-w);
    height: var(--hero-modeswitch-h);
    transition: 0.4s;
    input {
      display: none;
    }
  }

  .slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    outline: solid var(--stroke-w) var(--c-stroke);
    background-color: rgb(var(--clr-wb-light), 0.15);
    transition: 200ms;
    &:hover {
      transform: scale(1.03);
      background-color: rgb(var(--clr-wb-light), 0.2);
    }

    .slidee {
      position: absolute;
      transform-origin: center;
      transform: translate(-50%, 0%) rotate(0deg);
      background-color: rgb(var(--clr-wb-light));
      height: calc(
        var(--hero-modeswitch-h) - var(--hero-modeswitch-slider-dist)
      );
      width: calc(
        var(--hero-modeswitch-h) - var(--hero-modeswitch-slider-dist)
      );
      top: calc(var(--hero-modeswitch-slider-dist) / 2);
      left: calc(var(--hero-modeswitch-h) / 2);
      outline: solid var(--stroke-w) var(--c-stroke);
      transition: var(--modeswitch-transition-time);
    }

    .arrow-wrapper {
      width: 100%;
      opacity: 1;
      height: 100%;
      transform: rotate(0deg);
      transition: 0.7s cubic-bezier(0.11, 0.61, 0.36, 1.22);
      svg {
        position: absolute;
        transform-origin: center;
        transform: translate(calc(-50% + 5px), 0%);
        width: 38%;
        height: 100%;
        left: 50%;
        fill: rgb(var(--clr-wb-dark), 0.2);
        stroke: var(--c-stroke);
        stroke-width: calc(var(--stroke-w) / 2);
        transition: var(--modeswitch-transition-time);
      }
    }
  }

  .round {
    border-radius: 999rem;
  }

  body.lightmode .slider .slidee {
    left: calc(var(--hero-modeswitch-w) - var(--hero-modeswitch-h) / 2);
    transform: translate(-50%, 0%);
  }

  body.lightmode .slider .slidee .arrow-wrapper {
    transform: rotate(180deg);
  }

  @media only screen and (max-width: 600px) {
    body .hero-container h1 .sub-wrapper {
      flex-direction: column;
      gap: 0.6rem;

      .sub {
        font-size: var(--step-2);
      }
      .sub-connect {
        font-size: var(--step-0);
      }
    }
  }
</style>

<script>
  const letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";

  let interval = null;

  const subLeftElement = document.querySelector(".sub-left") as HTMLElement;
  subLeftElement.onmouseover = (event: any) => {
    let iteration = 0;

    clearInterval(interval);

    const originalText = event.target.dataset.value;
    const textLength = originalText.length;
    const maxIterations = 6;

    interval = setInterval(() => {
      event.target.innerText = originalText
        .split("")
        .map((originalLetter: string, index: number) => {
          const changeIterations = Math.min(iteration - index, maxIterations);
          if (changeIterations <= 0) {
            return originalLetter;
          } else if (changeIterations < maxIterations) {
            return letters[Math.floor(Math.random() * 52)];
          } else {
            return originalText[index];
          }
        })
        .join("");

      iteration++;
      if (iteration >= textLength + maxIterations) {
        clearInterval(interval);
      }
    }, 17);
  };
</script>
