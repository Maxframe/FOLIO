---
import ImageBuilder from "./ImageBuilder.astro";
import { PortableText } from "astro-portabletext";

export interface Props {
  sectionContent: any;
}
const { sectionContent } = Astro.props as Props;

/* const maxHeight = sectionContent.maxHeight; */
---

<div class="section-wrapper">
  {
    sectionContent._type === "sectionImageSingle" ? (
      <div class="single-image-section">
        <div
          class="image-wrapper single-image-wrapper"
          style={{
            gridColumnStart: `calc(${sectionContent.imageSettings.gridBegin} * 2 - 1)`,
            gridColumnEnd: `calc(${sectionContent.imageSettings.gridEnd} * 2 - 1)`,
          }}
        >
          <ImageBuilder
            cls="single-image"
            source={sectionContent.sImage.asset._ref}
            alt={sectionContent.altText}
          />
          {sectionContent.captionText && (
            <p class="caption-text">{sectionContent.captionText}</p>
          )}
        </div>
      </div>
    ) : (
      ""
    )
  }
  {
    sectionContent._type === "sectionImageDouble" ? (
      <div class="double-image-section">
        <div class="double-image-wrapper">
          <div
            class="image-wrapper"
            style={{
              gridColumnStart: `calc(${sectionContent.imageSettings.gridBegin} * 2 - 1)`,
              gridColumnEnd: `calc(${sectionContent.imageSettings.gridEnd} * 2 - 1)`,
            }}
          >
            <ImageBuilder
              cls="double-image double-image-left"
              source={sectionContent.dImageUpload.dImageLeft.asset._ref}
              alt={sectionContent.dImageUpload.altTextLeft}
            />
            <ImageBuilder
              cls="double-image double-image-right"
              source={sectionContent.dImageUpload.dImageRight.asset._ref}
              alt={sectionContent.dImageUpload.altTextRight}
            />
            {sectionContent.captionText && (
              <p class="caption-text">{sectionContent.captionText}</p>
            )}
          </div>
        </div>
      </div>
    ) : (
      ""
    )
  }
  {
    sectionContent._type === "sectionText" ? (
      <div class="text-section">
        <h3 class="text-section-title">{sectionContent.sectionTitle}</h3>
        <div class="text-section-text block-wrapper">
          <PortableText value={sectionContent.sectionText} />
        </div>
      </div>
    ) : (
      ""
    )
  }
</div>
<style lang="scss">
  /* define:vars={{ textGridPos, sImageGridBegin, sImageGridEnd }} */
  .text-section {
    display: grid;
    grid-template-columns: repeat(18, 1fr);
    grid-template-rows: auto;
    grid-column: 1 / var(--project-grid-nr);
    column-gap: var(--project-grid-gap);

    .text-section-title {
      grid-column-start: span 2;
      grid-column-end: calc(var(--textGridPos) * 2 - 1);
      text-align: right;
      text-transform: uppercase;
      font-size: 0.8rem;
      font-weight: 700;
      color: var(--c-lighter-text);
      letter-spacing: 0.06rem;
      margin-top: 0.2rem;
    }

    .text-section-text {
      grid-column-start: calc(var(--textGridPos) * 2 - 1);
      grid-column-end: span 8;
      font-size: var(--step-1);
    }
  }

  .single-image-section {
    display: grid;
    grid-template-columns: repeat(18, 1fr);
    grid-template-rows: auto;
    grid-column: 1 / var(--project-grid-nr);
    column-gap: var(--project-grid-gap);

    .single-image-wrapper {
    }

    .caption-text {
      text-align: center;
    }
  }

  .double-image-section {
    display: grid;
    grid-template-columns: repeat(18, 1fr);
    grid-template-rows: auto;
    grid-column: 1 / var(--project-grid-nr);
    column-gap: var(--project-grid-gap);

    .double-image-wrapper {
      .image-wrapper {
        display: flex;
        gap: 1rem;
      }
    }

    .caption-text {
      text-align: center;
    }
  }
</style>
