---
export interface Props {
  classes?: string;
  show?: boolean;
}

const { classes, show, ...rest } = Astro.props as Props;
---

<div
  class="floating-modeswitch-wrapper"
  class:list={[classes, { showfloat: show }]}
>
  <button
    class="modeswitch"
    aria-label="Modeswitch Button"
    data-umami-event="Floating Modeswitch"
  >
    <div class="slider round">
      <div class="slidee round"></div>
    </div>
  </button>
</div>

<style lang="scss">
  .floating-modeswitch-wrapper {
    position: fixed;
    bottom: var(--content-px);
    right: var(--content-px);
    opacity: 0;
    z-index: 999;
    transition: opacity var(--modeswitch-transition-time);
    &:hover .modeswitch {
      transform: scale(1.03);
      background-color: rgb(var(--c-bg));
    }

    .modeswitch {
      width: var(--float-modeswitch-size);
      height: var(--float-modeswitch-size);
      border-radius: 50%;
      background-color: var(--c-pill-bg);
      backdrop-filter: blur(10px);
      cursor: pointer;
      outline: solid var(--stroke-w) rgb(var(--c-stroke));
      pointer-events: none;

      transition:
        outline var(--modeswitch-transition-time),
        background-color var(--modeswitch-transition-time),
        transform 200ms;
    }
  }

  .slider {
    position: absolute;
    cursor: pointer;
    top: 50%;
    left: 50%;
    width: var(--float-modeswitch-w);
    height: var(--float-modeswitch-h);
    transform: translate(-50%, -50%);
    outline: solid var(--stroke-w) rgb(var(--c-stroke));
    background-color: rgb(var(--clr-wb-light), 0.2);
    transition: var(--modeswitch-transition-time);

    .slidee {
      position: absolute;
      transform-origin: center;
      transform: translate(-50%, 0%) rotate(0deg);
      background-color: rgb(var(--clr-wb-light));
      height: calc(100% - var(--float-modeswitch-slider-dist));
      width: calc(
        var(--float-modeswitch-h) - var(--float-modeswitch-slider-dist)
      );
      top: calc(var(--float-modeswitch-slider-dist) / 2);
      left: calc(var(--float-modeswitch-h) / 2);
      outline: solid var(--stroke-w) rgb(var(--c-stroke));
      transition: var(--modeswitch-transition-time);
    }
  }
  .round {
    border-radius: 999rem;
  }

  body.lightmode .slider .slidee {
    left: calc(var(--float-modeswitch-w) - var(--float-modeswitch-h) / 2);
  }

  .showfloat {
    opacity: 1;

    & .modeswitch {
      pointer-events: auto;
    }
  }
</style>

<script>
  document.addEventListener("astro:page-load", () => {
    /* Switches Light/darkmode accordingly*/
    let mode = sessionStorage.getItem("mode");
    const modeSwitch = document.querySelectorAll(".modeswitch");

    const enableLightMode = () => {
      document.body.classList.add("lightmode");
      sessionStorage.setItem("mode", "light");
    };

    const enableDarkMode = () => {
      document.body.classList.remove("lightmode");
      sessionStorage.setItem("mode", null);
    };

    modeSwitch.forEach(function (e) {
      e.addEventListener("click", () => {
        mode = sessionStorage.getItem("mode");

        if (mode !== "light") {
          enableLightMode();
        } else {
          enableDarkMode();
        }
      });
    });

    if (mode == "light") {
      enableLightMode();
    }
  });
</script>
