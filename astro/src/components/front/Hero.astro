---
import { sanityClient } from "sanity:client";

const heroData = await sanityClient.fetch(`*[_type == 'hero'][0]{
  "title": heroText.title,
  "titleSpecial": heroText.titleSpecial,
  "subtitleLeft": heroText.subtitleLeft,
  "subtitleConnect": heroText.subtitleConnect,
  "subtitleRight": heroText.subtitleRight,
}`);
---

<section class="hero">
  <div class="hero__wrapper">
    <h1 class="hero__title-wrapper">
      <span class="hero__title highlight">{heroData.titleSpecial}</span>
      <span class="hero__title">{heroData.title}</span>
    </h1>
    <h2 class="hero__subtitle-wrapper">
      <span
        class="hero__subtitle hero__subtitle--left"
        data-text={heroData.subtitleLeft}>{heroData.subtitleLeft}</span
      >
      <span class="hero__subtitle hero__subtitle--connect"
        >{heroData.subtitleConnect}</span
      >
      <span class="hero__subtitle hero__subtitle--right"
        >{heroData.subtitleRight}</span
      >
    </h2>
  </div>

  <button
    class="modeswitch--hero"
    title="Dark/Light Mode"
    aria-label="Dark/Light Mode"
    data-umami-event="Hero Modeswitch"
  >
    <div class="modeswitch__slider round">
      <div class="modeswitch__slidee round">
        <div class="modeswitch__arrow">
          <svg
            width="21"
            height="38"
            viewBox="0 0 21 38"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M4.32182 35.4846L18.6959 20.1072C19.2785 19.484 19.2785 18.516 18.6959 17.8928L4.32182 2.51544C3.31729 1.4408 1.5159 2.15164 1.5159 3.62267L1.5159 34.3773C1.5159 35.8484 3.3173 36.5592 4.32182 35.4846Z"
            ></path>
          </svg>
        </div>
      </div>
    </div>
  </button>
</section>

<style lang="scss">
  .hero {
    display: flex;
    height: calc(100dvh - var(--featured-offset));
    height: calc(100vh - var(--featured-offset));
    min-height: calc(100vh var(--featured-offset));
    gap: 3rem;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    max-width: 1200px;
    margin: 0 auto;
    padding: var(--nav-height) var(--content-px) 0;
    .hero__wrapper {
      display: flex;
      flex-direction: column;
      .hero__title-wrapper {
        display: inline-block;
        position: relative;
        line-height: 1.4;
        user-select: none;
        text-align: center;
        opacity: 0;
        color: rgb(var(--c-fg));
        animation-name: titleAnimation;
        animation-timing-function: ease;
        animation-fill-mode: forwards;
        animation-duration: 0.8s;
        .hero__title {
          font-size: var(--step-5);
          transition: color var(--modeswitch-transition-time);
        }
        .highlight {
          color: rgb(var(--clr-accent));
        }
      }
      .hero__subtitle-wrapper {
        display: flex;
        gap: 1rem;
        align-items: center;
        justify-content: center;
        opacity: 0;
        animation-name: titleAnimation;
        animation-timing-function: ease;
        animation-fill-mode: forwards;
        animation-duration: 0.8s;
        animation-delay: 0.2s;
        padding: 0.2rem 0;

        .hero__subtitle {
          font-size: var(--step-1);
          font-weight: 600;
          transition: color var(--hover-transition);
          cursor: pointer;
          text-align: center;
        }

        .hero__subtitle--left {
          font-weight: 500;
          font-family: monospace;
          color: rgb(var(--clr-wb-light));
        }

        .hero__subtitle--connect {
        }

        .hero__subtitle--right {
          position: relative;
          z-index: 1;
          color: rgb(var(--clr-wb-light) / 0.35);
          &:hover {
            color: rgb(var(--clr-wb-light) / 0.6);
          }
          &::after {
            position: absolute;
            content: "";
            left: -0.2rem;
            bottom: 0;
            height: 0.3rem;
            background-color: rgb(var(--clr-accent));
            width: calc(100% + 0.4rem);
            transform: scaleX(0);
            transform-origin: bottom right;
            transition: transform var(--modeswitch-transition-time) ease;
            z-index: -1;
          }
        }
        .hero__subtitle--right.highlight::after {
          transform: scaleX(1);
          transform-origin: bottom left;
        }
      }
    }
  }
  body.lightmode .hero .hero__wrapper .hero__subtitle-wrapper {
    .hero__subtitle--left {
      color: rgb(var(--clr-wb-dark) / 0.6);
      &:hover {
        color: rgb(var(--clr-wb-dark) / 1);
      }
    }
    .hero__subtitle--right {
      color: rgb(var(--clr-wb-dark));

      &:hover::after {
        transform: scaleX(1);
        transform-origin: bottom left;
      }
    }
  }
  /* Mode Switcher */
  .modeswitch--hero {
    display: inline-block;
    position: relative;
    width: var(--hero-modeswitch-w);
    height: var(--hero-modeswitch-h);
    transition: 0.4s;
    input {
      display: none;
    }
  }

  .modeswitch__slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    outline: solid var(--stroke-w) rgb(var(--c-stroke));
    background-color: rgb(var(--clr-wb-light) / 0.1);
    transition: 200ms;
    &:hover {
      transform: scale(1.03);
      background-color: rgb(var(--clr-wb-light) / 0.15);
    }

    .modeswitch__slidee {
      position: absolute;
      transform-origin: center;
      transform: translate(-50%, 0%) rotate(0deg);
      background-color: rgb(var(--clr-wb-light));
      height: calc(
        var(--hero-modeswitch-h) - var(--hero-modeswitch-slider-dist)
      );
      width: calc(
        var(--hero-modeswitch-h) - var(--hero-modeswitch-slider-dist)
      );
      top: calc(var(--hero-modeswitch-slider-dist) / 2);
      left: calc(var(--hero-modeswitch-h) / 2);
      outline: solid var(--stroke-w) rgb(var(--c-stroke));
      transition: var(--modeswitch-transition-time);
    }

    .modeswitch__arrow {
      width: 100%;
      opacity: 1;
      height: 100%;
      transform: rotate(0deg);
      transition: 0.7s cubic-bezier(0.11, 0.61, 0.36, 1.22);
      svg {
        position: absolute;
        transform-origin: center;
        transform: translate(calc(-50% + 5px), 0%);
        width: 38%;
        height: 100%;
        left: 50%;
        fill: rgb(var(--clr-wb-dark) / 0.2);
        stroke: rgb(var(--c-stroke));
        stroke-width: calc(var(--stroke-w) / 2);
        transition: var(--modeswitch-transition-time);
      }
    }
  }

  .round {
    border-radius: 999rem;
  }

  @keyframes titleAnimation {
    0% {
      clip-path: polygon(10% 0%, 100% 0%, 90% 100%, 0% 100%);
      transform: translateY(-10px);
      opacity: 0;
    }
    100% {
      clip-path: polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%);
      transform: translateY(0);
      opacity: 1;
    }
  }

  body.lightmode .modeswitch__slider .modeswitch__slidee {
    left: calc(var(--hero-modeswitch-w) - var(--hero-modeswitch-h) / 2);
    transform: translate(-50%, 0%);
  }

  body.lightmode .modeswitch__slider .modeswitch__slidee .modeswitch__arrow {
    transform: rotate(180deg);
  }

  @media only screen and (width <= 600px) {
    :root {
      --hero-modeswitch-h: 5.6rem;
      --hero-modeswitch-w: 10rem;
      --hero-modeswitch-slider-dist: 1.4rem;
    }

    body .hero .hero__wrapper .hero__subtitle-wrapper {
      flex-direction: column;
      gap: 0;

      .hero__subtitle {
        font-size: var(--step-1);
      }
      .hero__subtitle--connect {
        font-size: var(--step-0);
      }
    }
  }
</style>

<script>
  document.addEventListener("astro:page-load", () => {
    const letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
    let interval = null;
    const changes = [];
    const subLeftElement = document.querySelector(
      ".hero__subtitle--left"
    ) as HTMLElement;
    const heroModeSwitch = document.querySelector(".modeswitch--hero");
    const floatModeSwitch = document.querySelector(".modeswitch--float");
    const options = {};

    const animateText = () => {
      if (!document.body.classList.contains("lightmode")) {
        const originalText = subLeftElement.dataset.text;
        const textLength = originalText.length;
        const maxIterations = 5;
        const speed = 20;

        changes.push({
          iteration: 0,
          originalText: originalText,
        });

        if (!interval) {
          interval = setInterval(() => {
            let displayText = originalText.split("");

            for (let i = 0; i < changes.length; i++) {
              const change = changes[i];
              displayText = displayText.map((letter: string, index: number) => {
                const changeIterations = Math.min(
                  change.iteration - (textLength - 1 - index),
                  maxIterations
                );

                if (changeIterations <= 0) {
                  return letter;
                } else if (changeIterations < maxIterations) {
                  return letters[Math.floor(Math.random() * letters.length)];
                } else {
                  return change.originalText[index];
                }
              });
              change.iteration++;
              if (change.iteration >= textLength + maxIterations) {
                changes.splice(i, 1);
                i--;
              }
            }
            subLeftElement.innerText = displayText.join("");

            if (changes.length === 0) {
              clearInterval(interval);
              interval = null;
            }
          }, speed);
        }
      }
    };
    if (subLeftElement) {
      subLeftElement.addEventListener("mouseover", animateText);
      subLeftElement.addEventListener("click", animateText);
      heroModeSwitch.addEventListener("click", animateText);
    }

    /* Show/hide floating modeswitch */
    const heroObserver = new IntersectionObserver(function (entries) {
      entries.forEach((entry) => {
        if (!entry.isIntersecting) {
          floatModeSwitch.classList.add("showfloat");
        } else {
          floatModeSwitch.classList.remove("showfloat");
        }
      });
    }, options);

    if (heroModeSwitch) {
      heroObserver.observe(heroModeSwitch);
    }
  });
</script>
