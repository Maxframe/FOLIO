---
import type { Props as $, Mark as Mark } from "astro-portabletext/types";
import { Mark as DefaultMark } from "astro-portabletext/components";
import InternalLink from "./InternalLink.astro";
import ExternalLink from "./ExternalLink.astro";
export type Props = $<Mark<never>>;

const props = Astro.props;
const { node, index, isInline, ...attrs } = props;

const markTypeIs = (markType: string) => markType === props.node.markType;

/* const components = {
  InternalLink: ({ value, children }) => {
    const { slug = {} } = value;
    const href = `/${slug.current}`;
    return <a href={href}>{children}</a>;
  },
  ExternalLink: ({ value, children }) => {
    const { blank, href } = value;
    return blank ? (
      <a href={href} target="_blank" rel="noopener">
        {children}
      </a>
    ) : (
      <a href={href}>{children}</a>
    );
  },
}; */

const Cmp = markTypeIs("internalLink")
  ? InternalLink
  : markTypeIs("externalLink")
    ? ExternalLink
    : DefaultMark;
---

<Cmp {...props}><slot /></Cmp>

<!-- : markTypeIs("externalLink") ? (

  
  <a
    href={(node as unknown as Mark<{ href: string }>).markDef.href}
    target="_blank"
    rel="noopener"
    {...attrs}
  >
    <slot />
  </a>
) -->
