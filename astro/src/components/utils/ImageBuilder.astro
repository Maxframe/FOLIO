---
import { urlFor } from "../../utils/urlForImage";

export interface Props {
  source: string;
  cls?: string;
  alt: string;
  lqip: string;
  ratio: number;
  caption?: string;
  w?: number;
  fit?:
    | "clip"
    | "crop"
    | "fill"
    | "fillmax"
    | "max"
    | "scale"
    | "min" /* More info: https://www.sanity.io/docs/image-urls#fit-45b29dc6f09f */;
  loading?: "eager" | "lazy";
  vert?: boolean;
}
const {
  source,
  cls,
  alt,
  lqip,
  ratio,
  caption,
  w,
  fit,
  loading = "lazy",
  vert,
} = Astro.props as Props;

const pattern = /^image-([a-f\d]+)-(\d+x\d+)-(\w+)$/;
const decodeAssetId = (id: string) => {
  const [, assetId, dimensions, format] = pattern.exec(id);
  const [width, height] = dimensions.split("x").map((v) => parseInt(v, 10));
  return {
    assetId,
    size: { width, height },
    format,
  };
};
const imageSize = decodeAssetId(source);

let maxWidth = w ? w : 1280;
const defaultWidths = [320, 640, 960, 1280];

const widths = defaultWidths.filter((width) => width <= maxWidth);
---

<figure class="wrapper">
  <div style={`padding-bottom: ${100 / ratio}%`} aria-hidden="true"></div>
  <img class="lqip" src={lqip} class="" alt="" aria-hidden="true" />
  {
    vert && (
      <source
        media={`(max-width: ${defaultWidths[2]}px) and (min-height: ${defaultWidths[1]}px) and (max-aspect-ratio: 3/2)`}
        srcset={urlFor(source)
          .auto("format")
          .fit(fit ? fit : "clip")
          .height(1280)
          .url()}
      />
    )
  }
  {
    widths.map((width) => (
      <source
        media={`(max-width: ${width}px)`}
        srcset={`${urlFor(source)
          .auto("format")
          .fit(fit ? fit : "clip")
          .width(width)
          .url()} ${width}w`}
      />
    ))
  }

  <img
    src={urlFor(source)
      .auto("format")
      .fit(fit ? fit : "clip")
      .width(maxWidth)
      .url()}
    alt={alt ? alt : ""}
    class:list={["source", cls]}
    width={imageSize.size.width}
    height={imageSize.size.height}
    loading={loading}
    draggable="false"
  />
</figure>

<style>
  .wrapper {
    position: relative;
    overflow: hidden;
    width: 100%;
    height: 100%;
  }
  img {
    display: block;
    position: absolute;
    width: 100%;
    height: 100%;
    inset: 0;
    object-fit: cover;
    object-position: center;
  }
  .lqip {
    filter: blur(10px);
  }
  .source {
    opacity: 0;
    transition: opacity 400ms ease-out;
  }
  .loaded {
    opacity: 1;
  }
  .instant {
    transition: none;
  }
</style>

<script>
  document.addEventListener("astro:page-load", () => {
    const sourceImages = document.querySelectorAll("img.source");

    const handleImageLoad = (
      image: HTMLImageElement,
      bypassTransition = false
    ) => {
      if (bypassTransition) {
        image.classList.add("instant");
      }
      image.classList.add("loaded");
      image.removeEventListener("load", () =>
        handleImageLoad(image, bypassTransition)
      );
      image.removeEventListener("error", () =>
        handleImageLoad(image, bypassTransition)
      );
    };

    sourceImages.forEach((element) => {
      const image = element as HTMLImageElement;
      if (image.complete) {
        handleImageLoad(image, true);
      } else {
        image.addEventListener("load", () => handleImageLoad(image));
        image.addEventListener("error", () => handleImageLoad(image));
      }
    });
  });
</script>
