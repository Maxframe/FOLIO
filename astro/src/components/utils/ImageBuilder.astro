---
import { urlFor } from "../../utils/urlForImage";

export interface Props {
  source: string;
  cls?: string;
  alt: string;
  lqip: string;
  caption?: string;
  captionUrl?: string;
  w?: number;
  fit?:
    | "clip"
    | "crop"
    | "fill"
    | "fillmax"
    | "max"
    | "scale"
    | "min" /* More info: https://www.sanity.io/docs/image-urls#fit-45b29dc6f09f */;
  loading?: "eager" | "lazy";
  vert?: boolean;
  isDark?: boolean;
}
const {
  source,
  cls,
  alt = "",
  lqip,
  caption,
  captionUrl,
  w,
  fit = "max",
  loading = "lazy",
  vert,
  isDark = false,
  ...attrs
} = Astro.props as Props;

const pattern = /^image-([a-f\d]+)-(\d+x\d+)-(\w+)$/;

const decodeAssetId = (id: string) => {
  const [, assetId, dimensions, format] = pattern.exec(id);
  const [width, height] = dimensions.split("x").map((v) => parseInt(v, 10));
  return {
    assetId,
    size: { width, height },
    format,
  };
};
const imageSize = decodeAssetId(source);

const defaultWidths = [320, 640, 960, 1280];
const maxWidth = w ? w : defaultWidths.slice(-1).pop();
const widths = defaultWidths.filter((width) => width <= maxWidth);
---

<figure class="image">
  <div
    class:list={["image__wrapper", { image__border: isDark }, cls]}
    {...attrs}
  >
    <img class="image__lqip loading" src={lqip} alt="" aria-hidden="true" />
    <picture>
      {
        vert && (
          <source
            media={`(max-width: ${defaultWidths[2]}px) and (min-height: ${defaultWidths[1]}px) and (max-aspect-ratio: 3/2)`}
            srcset={urlFor(source).auto("format").fit(fit).height(1280).url()}
          />
        )
      }
      {
        widths.map((width) => (
          <source
            media={`(max-width: ${width}px)`}
            srcset={`${urlFor(source)
              .auto("format")
              .fit(fit)
              .width(width)
              .url()} ${width}w`}
          />
        ))
      }
      <img
        src={urlFor(source).auto("format").fit(fit).width(maxWidth).url()}
        alt={alt}
        class="image__source"
        loading={loading}
        draggable="false"
        width={imageSize.size.width}
        height={imageSize.size.height}
      />
    </picture>
  </div>
  {
    caption && (
      <figcaption>
        {captionUrl ? (
          <a href={captionUrl} target="_blank" rel="noopener">
            <span>{caption}</span>
          </a>
        ) : (
          <span>{caption}</span>
        )}
      </figcaption>
    )
  }
</figure>

<style>
  .image {
    text-align: center;
    width: 100%;
    height: 100%;
  }
  .image__wrapper {
    position: relative;
    overflow: hidden;
    width: 100%;
    height: 100%;
    background-color: rgb(var(--c-highlighted-bg) / 0.1);
    transition:
      box-shadow var(--modeswitch-transition-time),
      outline var(--modeswitch-transition-time),
      border var(--modeswitch-transition-time);
  }
  body.lightmode .image__wrapper {
    box-shadow: 8px 8px 0 2px rgb(var(--c-stroke));
  }
  .image__lqip {
    position: absolute;
    inset: 0;
    z-index: -1;
    filter: blur(10px);
  }

  .loading {
    animation: pulse 1000ms ease-in-out alternate infinite;
  }

  @keyframes pulse {
    from {
      opacity: 1;
    }

    to {
      opacity: 0.7;
    }
  }
  .image__source {
    opacity: 0;
    transition: opacity 400ms ease-out;
  }

  .image__border {
    border: solid 2px rgb(var(--clr-wb-light) / 0.05);
  }
  body.lightmode .image__border {
    border: solid 0px rgb(var(--clr-wb-light) / 0);
  }

  .border {
    outline: solid var(--stroke-w) rgb(var(--c-stroke));
  }

  .round {
    border-radius: var(--sm-radius);
  }

  figcaption {
    transition: color var(--modeswitch-transition-time);
    margin-top: 0.8rem;
  }
  .loaded {
    opacity: 1;
  }
  .instant {
    transition: none;
  }
</style>

<script>
  document.addEventListener("astro:page-load", () => {
    const images = document.querySelectorAll(".image");

    images.forEach((element) => {
      const lqipImage = element.querySelector(
        "img.image__lqip"
      ) as HTMLImageElement;
      const sourceImage = element.querySelector(
        "img.image__source"
      ) as HTMLImageElement;

      if (sourceImage.complete) {
        handleImageLoad(sourceImage, lqipImage, true);
      } else {
        sourceImage.addEventListener("load", () =>
          handleImageLoad(sourceImage, lqipImage)
        );
        sourceImage.addEventListener("error", () =>
          handleImageLoad(sourceImage, lqipImage)
        );
      }
    });

    function handleImageLoad(
      source: HTMLImageElement,
      lqip: HTMLImageElement,
      bypassTransition = false
    ) {
      if (bypassTransition) {
        source.classList.add("instant");
      }
      source.classList.add("loaded");
      lqip.classList.remove("loading");
      source.removeEventListener("load", () =>
        handleImageLoad(source, lqip, bypassTransition)
      );

      source.removeEventListener("error", () =>
        handleImageLoad(source, lqip, bypassTransition)
      );
    }
  });
</script>
